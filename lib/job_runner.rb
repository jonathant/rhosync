#!/usr/bin/env rubyrequire 'rubygems'require 'daemons'    ENV["RAILS_ENV"] = ARGV[1] || "production"RAILS_ROOT = File.expand_path(File.dirname(__FILE__) + '/..')require File.join(RAILS_ROOT, "config/environment")Daemons.run_proc('delayed_jobs_demon', {  :log_output => true,   :dir_mode => :normal,   :dir => "#{RAILS_ROOT}/log"   }) do  begin    puts "*** Starting delayed job worker #{Delayed::Job.worker_name} at #{Time.now} for #{ENV['RAILS_ENV']}\n"    # these log output streams are closed and need to be reopened here    my_logger = ActiveSupport::BufferedLogger.new(File.join(RAILS_ROOT, "log/delayed_jobs_demon.log"))    my_logger.auto_flushing = true    ActiveRecord::Base.logger = my_logger # for general logging    ActionMailer::Base.logger = my_logger # for exception reporting        loop do        result = nil                                       realtime = Benchmark.realtime do          result = Delayed::Job.work_off            end                                                                                count = result.sum      if count.zero?         sleep(5)        puts 'Waiting for more jobs...'      else        status = "#{count} jobs processed at %.4f j/s, %d failed ..." % [count / realtime, result.last]        my_logger.info status        puts status      end    end  rescue => e    puts "exception in delayed_jobs_demon: #{e.inspect}\n"    puts e.backtrace.join("\n")  ensure    Delayed::Job.clear_locks!   puts "ending delayed_jobs_demon at #{Time.now}\n"  endend